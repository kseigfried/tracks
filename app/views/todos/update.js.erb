<% if !@saved -%>
  TracksPages.show_edit_errors(html_for_error_messages());
<% else

  # jquery animations are async, so first collect all animation steps,
  # then execute them sequential. All steps are functions which are passed a function
  # with the next animation steps

  animation = []
  animation << "remove_todo" if update_needs_to_remove_todo_from_container
  if replace_with_updated_todo
    animation << "replace_todo"
  elsif append_updated_todo
    animation << (@new_context_created ? "insert_new_context_with_updated_todo" : "add_to_existing_container")
  end
  animation << "hide_context" if update_needs_to_hide_context
  animation << "highlight_updated_todo"
%>

  <%= render_animation(animation) %>
  TracksPages.page_notify('notice', '<%=@status_message%>', 5);
  update_badge_count();
<% end %>

function remove_todo(next_steps) {
  $('#<%= dom_id(@todo) %>').fadeOut(400, function() {
    $('#<%= dom_id(@todo) %>').remove();

  <% # TODO: to helper function: show_empty_message_source_container
     container_id = ""
     source_view do |page|
       page.project  {
         container_id = "p#{@original_item_project_id}empty-nd" if @remaining_in_context == 0
         container_id = "tickler-empty-nd" if @todo_was_activated_from_deferred_state && @remaining_deferred_or_pending_count == 0
         }
       page.deferred { container_id = "c#{@original_item_context_id}empty-nd" if @remaining_in_context == 0 }
       page.calendar { container_id = "empty_#{@original_item_due_id}" if @old_due_empty }
       page.tag      {
         container_id = "hidden-empty-nd" if !@todo.hidden? && @todo_hidden_state_changed && @remaining_hidden_count == 0
         container_id = "tickler-empty-nd" if @todo_was_activated_from_deferred_state && @remaining_deferred_or_pending_count == 0
         }
       page.context  { container_id = "c#{@original_item_context_id}empty-nd" if @remaining_in_context == 0 }
     end
     unless container_id.blank?
  -%>
      $("#<%= container_id%>").slideDown(100);
  <% end -%>
    next_steps.go();
  });
}

function add_to_existing_container(next_steps) {
  $('#<%= item_container_id(@todo) %>').append(html_for_todo());
  <% if source_view_is_one_of(:project,:calendar) -%>
    next_steps.go();
    <% if (@target_context_count==1) || (@todo.deferred? && @remaining_deferred_or_pending_count == 1) -%>
      $("#<%=  empty_container_msg_div_id %>").slideUp(100);
    <% end -%>
  <% else -%>
    <% unless (@todo_hidden_state_changed && @todo.hidden?) || @todo_was_deferred_from_active_state -%>
      $('#c<%= @todo.context_id %>').fadeIn(500, function() { 
        next_steps.go();
        <% if @target_context_count==1 -%>
          $("#<%=  empty_container_msg_div_id %>").slideUp(100);
        <% end -%>
      });
    <% else -%>
      next_steps.go();
      <% if (@target_context_count==1) || (@todo.deferred? && @remaining_deferred_or_pending_count == 1) -%>
        $("#<%=  empty_container_msg_div_id %>").slideUp(100);
      <% end -%>
    <% end -%>
  <% end -%>
}

function replace_todo(next_steps) {
  $('#<%= dom_id(@todo) %>').html(html_for_todo());
  next_steps.go();
}

function hide_context(next_steps) {
  <% context_id = @context_changed ? @original_item_context_id : @todo.context_id -%>
  $('#c<%=  context_id %>').fadeOut(400, function(){ next_steps.go(); });
}

function highlight_updated_todo(next_steps) {
  $('#<%= dom_id(@todo)%>').effect('highlight', {}, 2000, function(){ next_steps.go(); });
}

function update_badge_count() {
  <%
    count = source_view_is(:context) ? @remaining_in_context : @down_count
    count = @project_changed ? @remaining_undone_in_project : count
  -%>
  TracksPages.set_page_badge(<%= count %>);
}

function insert_new_context_with_updated_todo(next_steps) {
  $('#display_box').prepend(html_for_new_context());
  $('#c<%= @todo.context_id %>').fadeIn(500, function() { next_steps.go(); });
}

function html_for_todo() {
  return "<%= @saved ? escape_javascript(render(:partial => 'todos/todo', :locals => { :todo => @todo, :parent_container_type => parent_container_type })) : "" %>";
}

function html_for_new_context() {
  return "<%= @saved && @new_context_created ? escape_javascript(render(:partial => 'contexts/context', :locals => { :context => @new_context, :collapsible => true })) : "" %>";
}

function html_for_error_messages() {
  return "<%= escape_javascript(error_messages_for('todo')) %>";
}

function update_predecessors() {
  <% @todo.uncompleted_predecessors.each do |p| -%>
    if ($('#<%=item_container_id(p)%>')) {
      $('#<%=dom_id(p)%>').html('<%=escape_javascript(render(:partial => 'todos/todo', :locals => { :todo => p, :parent_container_type => parent_container_type }))%>');
    }
  <% end -%>
}